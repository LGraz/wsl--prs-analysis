---
title: Hypothesis Testing
author: Lukas Graz
date: 2025-02-13
---

```{r}
#| code-fold: true
source("R/data_prep.R")
options(digits = 3)

# interactive <- function() FALSE
# D_trn$HM_NOISE_nrm <- scale(D_trn$HM_NOISE)
# D_tst$HM_NOISE_nrm <- scale(D_tst$HM_NOISE)
## No suspicious patterns in missing data
# mice::md.pattern(D[c(Mediator_vars, GIS_vars)[nNAs>0]], plot = FALSE)
# mice::md.pattern(D[PRS_orig_vars])
```

## Linear Modeling
### Imputation with MissForest on Training Data
```{r}
#| code-fold: true
#| code-summary: "Number of NAs in Mediators and GIS variables"
sapply(D[Mediator_vars], \(x) sum(is.na(x)))
sapply(D[GIS_vars], \(x) sum(is.na(x)))
```

```{r}
#| code-fold: true
#| code-summary: "Impute missing values using MissForest"
# Mediator imputation
D_trn[Mediator_vars] <- xfun::cache_rds({
  missForest(as.matrix(D_trn[Mediator_vars]))
  }, 
  file = "Mediator_imputation.rds", 
  dir = "cache/",
  hash = list(as.matrix(D_trn[Mediator_vars]))
)$ximp |> as.data.frame()

# GIS imputation (missForest)
D_trn[GIS_vars] <- xfun::cache_rds({
  missForest(as.matrix(D_trn[GIS_vars]))
  }, 
  file = "GIS_imputation.rds", 
  dir = "cache/",
  hash = list(as.matrix(D_trn[GIS_vars]))
)$ximp |> as.data.frame()
```

### Remove "LOC_" variables from Mediators
```{r}
Mediator_vars <- grep("LOC_", Mediator_vars, invert = TRUE, value = TRUE)
```

### Scaling Test Data
```{r}
#| code-fold: true
#| code-summary: "Scaling variables and show old scale"
all_vars <- c(Mediator_vars, GIS_vars, PRS_vars)
old_scale <- t(sapply(D_tst[c(all_vars)], \(x) 
  c(mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE))))

D_tst[c(all_vars)] <- lapply(D_tst[c(all_vars)], scale)
D_trn_scaled <- D_trn
D_trn_scaled[c(all_vars)] <- lapply(D_trn[c(all_vars)], scale)

old_scale
```


### Testing VIF
```{r}
#| code-fold: true
#| code-summary: "VIF: PRS ~ Mediators + GIS_vars  (NO interaction)"
car::vif(fit_PRS_MED <- lm(as.formula(paste0(
  PRS_vars[1], 
  " ~ ", 
  paste(Mediator_vars, collapse = " + "), " + ",
  paste(GIS_vars,      collapse = " + ")
)), D_trn)) |> summary()
```

```{r}
#| code-fold: true
#| code-summary: "VIF: PRS ~ (Mediators + GIS_vars)^2 (WITH interaction)"
suppressMessages(
car::vif(fit_PRS_MED <- lm(as.formula(paste0(
  PRS_vars[1], 
  " ~ ", 
  "(", paste(Mediator_vars, collapse = " + "), 
     " + ", paste(GIS_vars, collapse = " + "), 
  ")^2"
)), D_trn))) |> summary()
```

Since we model _with_ interactions later, the latter VIF are relevant for us. Given that they are very high (c.f. median and max), we would have no hope of finding any significant results in the full interaction model. Therefore, we will first perfom a variable selection, to reduce the VIF and enable us to find significant effects.



### All Interactions: Mediators ~ (GIS)^2
```{r}
#| code-fold: true
#| code-summary: "Code: Print Coef Table"

# Elegant function to create coefficient tables from model summaries
library(dplyr)
library(tidyr)
library(knitr)
library(purrr)

#' Create a formatted coefficient table from model summary list
#' 
#' @param model_summaries List of model summaries (e.g., output from lapply(models, summary))
#' @param sig_threshold Significance threshold for bold formatting (default: 0.001)
#' @param covariate_order Optional vector specifying order of covariates
#' @return Formatted table with models as columns and covariates as rows
create_coef_table <- function(model_summaries, sig_threshold = 0.001, covariate_order = NULL) {
  
  # Extract and format coefficients for all models
  format_model_coef <- function(coef_matrix, model_name) {
    estimates <- coef_matrix[, "Estimate"]
    p_values <- coef_matrix[, "Pr(>|t|)"]
    
    # Format with significance stars (common notation)
    formatted_coef <- sapply(seq_along(estimates), function(i) {
      est_str <- sprintf("%.3f", estimates[i])
      stars <- case_when(
        p_values[i] < 0.001 ~ "***",
        p_values[i] < 0.01 ~ "**",
        p_values[i] < 0.05 ~ "*",
        p_values[i] < 0.1 ~ ".",
        TRUE ~ ""
      )
      paste0(est_str, stars)
    })
    
    tibble(
      Model = model_name,
      Covariate = rownames(coef_matrix),
      Coefficient = formatted_coef
    )
  }
  
  # Process all models and create wide table
  coef_list <- map(model_summaries, coef)
  
  results_table <- map2_dfr(coef_list, names(coef_list), format_model_coef) %>%
    pivot_wider(names_from = Model, values_from = Coefficient, values_fill = "")
  
  # Apply covariate ordering
  if (is.null(covariate_order)) {
    # Default: Intercept first, then alphabetical
    all_covariates <- unique(results_table$Covariate)
    covariate_order <- c("(Intercept)", sort(all_covariates[all_covariates != "(Intercept)"]))
  }
  
  # Filter and reorder covariates
  results_table <- results_table %>%
    filter(Covariate %in% covariate_order) %>%
    slice(match(covariate_order, Covariate))
  
  kable(results_table, 
        format = "pipe",
        align = c("l", rep("c", ncol(results_table) - 1)))
}
```


```{r}
Res3 <- list()
for (mediator in Mediator_vars) {
  intercept_model <- lm(as.formula(paste0(
    mediator, " ~ 1")), D_trn)
  step_model <- step(intercept_model, 
    scope = as.formula(paste0(
      mediator, " ~ ", 
      "(", paste(GIS_vars, collapse = " + "), ")^2"
    )),
    trace = FALSE, k = log(nrow(D_trn))
  )
  Res3[[mediator]] <- lm(formula(step_model), D_tst)
}
(ResSum3 <- lapply(Res3, summary))
```

#### Visualization of Interactioneffect of LCARTIF_sqrt * RL_NDVI

```{r}
#| echo: false
#| warning: false

library(ggplot2)
D_plot <- rbind(D_trn_scaled, D_tst)
D_plot$FEELNAT <- pmax(-1,pmin(1,D_plot$FEELNAT))
ggplot(D_plot, aes(x = LCARTIF_sqrt, y=RL_NDVI, col = FEELNAT)) +
  geom_jitter(width=0.07)


# Erstelle RL_NDVI Gruppen
D_plot$RL_NDVI_group <- cut(D_plot$RL_NDVI, 
                          breaks = c(-Inf, -0.25, 0.25, Inf),
                          labels = c("Low (< -0.25)", "Medium (-0.25 to 0.25)", "High (> 0.25)"))

ggplot(D_plot, aes(x = LCARTIF_sqrt, y = FEELNAT, 
                  col = RL_NDVI_group, shape = RL_NDVI_group)) +
 geom_point(width = 0.07, alpha = 0.6) +
 geom_smooth(method = "loess", se = TRUE) +
 scale_shape_manual(values = c(16, 17, 15)) +  # Kreis, Dreieck, Quadrat
 scale_color_manual(values = c("red", "blue", "green")) +
 labs(x = "LCARTIF_sqrt", 
      y = "FEELNAT",
      color = "RL_NDVI Group",
      shape = "RL_NDVI Group") +
 theme_minimal()
```



### All Interactions: PRS ~ (Mediators + GIS)^2
```{r}
Res4 <- list()
for (prs in PRS_vars) {
  intercept_model <- lm(as.formula(paste0(
    prs, " ~ 1")), D_trn)
  step_model <- step(intercept_model, 
    scope = as.formula(paste0(
      prs, " ~ ", 
      "(", paste(GIS_vars, collapse = " + "), " + ", 
      paste(Mediator_vars, collapse = " + "), ")^2"
    )),
    trace = FALSE, k = log(nrow(D_trn))
  )
  Res4[[prs]] <- lm(formula(step_model), D_tst)
}
(ResSum4 <- lapply(Res4, summary))
```

### Table Summarizing Coefficients

Significant codes as usual: `0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1`

#### All Interactions: Mediators ~ (GIS)^2

```{r}
#| echo: false
#| output: asis
ResTab3 <- create_coef_table(ResSum3)
saveRDS(ResTab3, "cache/ResSum3.rds")
ResTab3
```


#### PRS ~ (Mediators + GIS)^2
```{r}
#| echo: false
#| output: asis
ResTab4 <- create_coef_table(ResSum4)
saveRDS(ResTab4, "cache/ResSum4.rds")
ResTab4
```
